#!/usr/bin/env node

// Test character processing directly
async function testCharProcessing() {
    console.log('Testing REPL character processing...');
    
    // Import the built module
    const circuitPython = await import('./build-standard/circuitpython.mjs');
    
    // Initialize CircuitPython
    const cp = await circuitPython.loadCircuitPython({
        heapsize: 128 * 1024,
        stdout: (data) => {
            console.log('STDOUT:', JSON.stringify(data));
            process.stdout.write(data);
        },
        stderr: (data) => {
            console.log('STDERR:', JSON.stringify(data));
            process.stderr.write(data);
        },
        linebuffer: false
    });
    
    // Initialize REPL
    cp.replInit();
    
    console.log('REPL initialized. Testing character input...');
    
    // Test sending individual characters for "2+3\n"
    const testInput = "2+3\n";
    
    for (let i = 0; i < testInput.length; i++) {
        const char = testInput.charCodeAt(i);
        console.log(`Sending character: ${char} ('${testInput[i]}')`);
        
        try {
            // Try sync version instead
            const result = cp.replProcessChar(char);
            console.log(`Result: ${result}`);
            
            if (result) {
                console.log('REPL indicated exit');
                break;
            }
        } catch (error) {
            console.log('Error:', error.message);
            break;
        }
    }
    
    console.log('Test complete');
}

testCharProcessing().catch(console.error);